{
  "name": "js-cache",
  "version": "1.0.2",
  "license": "MIT",
  "description": "Caching library supporting timeouts, events and external data sources",
  "keywords": [
    "cache",
    "memory",
    "event"
  ],
  "author": {
    "name": "Dirk Bonhomme",
    "email": "dirk@bytelogic.be"
  },
  "main": "index",
  "repository": {
    "type": "git",
    "url": "git://github.com/dirkbonhomme/js-cache"
  },
  "scripts": {
    "test": "make test"
  },
  "config": {
    "blanket": {
      "pattern": "lib/cache.js"
    }
  },
  "dependencies": {
    "infinite-timeout": "*",
    "backbone-events-standalone": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "sinon": "*",
    "blanket": "git://github.com/alex-seville/blanket.git#development"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# Caching library for JavaScript and Node.js\n\nCaching library with support for timeouts, events and external data sources.\n\n## Overview\n\n* [Usage in Node.js](#usage-in-nodejs)\n* [Usage in browsers](#usage-in-browsers)\n* [Instance](#instance)\n* [API](#api)\n* [External data source](#external-data-source)\n* [Events](#events)\n* [Developing](#developing)\n* [Building](#building)\n* [Testing](#testing)\n\n## Usage in Node.js  \n\n    var cache = require('js-cache');\n    cache.set('lorem', 'ipsum', 60000);\n    console.log(cache.get('lorem'));\n    \n    var myCache = new cache();\n    myCache.set('lorem', 'dolor', 60000);\n    console.log(myCache.get('lorem'));\n\n\n## Usage in browsers\n\n    <script src=\"bundle/cache.js\"></script> \n    <script>\n        cache.set('lorem', 'ipsum', 60000);\n        console.log(cache.get('lorem'));\n    </script>\n\n## Instance\n\nIt is possible to call the `cache` object directly:\n\n    cache.set('lorem', 'ipsum');\n    console.log(cache.get('lorem'));\n\nor use it as a constructor to create a separate storage:\n\n    var c2 = new cache();\n    c2.set('lorem', 'dolor');\n    console.log(c2.get('lorem'));\n\n## API\n\n### cache.set(`key`, `value`, `[ttl]`)\n\nCache data or update and existing record.\n\n`key` Unique key identifying the cache  \n`value` Cached value  \n`ttl` Time to live in milliseconds (optional) \n\n### cache.get(`key`, `[callback]`)\n\nGet cached value. Returns cached value (or undefined) if no callback was provided. Always returns undefined if callback argument is present.\n\n`key` Key identifying the cache  \n`callback` Return value in callback if record exists in memory or on external resource (optional)\n\n### cache.del(`key`)\n\nDelete cached data. Returns true if the record existed, false if not.\n\n`key` Key identifying the cache\n\n### cache.clear()\n\nClear all cached data. Returns number of cleared records.\n\n### cache.size()\n                \nReturns number of cached records.\n\n### cache.debug()\n\nReturns internal object with cached records.\n\n## External data source\n\nIt is possible to forward api requests to external handlers. They can be used for logging, storing in persistent database etc. The cache library will function as a temporary, in-memory layer.\n\n    var c = new cache({\n        set: setHandler,\n        get: getHandler,\n        del: delHandler,\n        clear: clearHandler\n    });\n    \nAll handlers are optional.\n    \n`setHandler` is called with `key`, `value`, `ttl` on cache.set().  \n\n`getHandler` is called with `key`, `callback` on cache.get() when a callback is provided and the key is not present in the cache. The getHandler is required to execute `callback`.  \n\n`delHandler` is called with `key` on cache.del(). It is not called when a cached record times out.  \n\n`clearHandler` is called without arguments on cache.clear().  \n\n## Events\n\nThe cache library uses the Backbone event framework. Please refer to their [documentation](http://backbonejs.org/#Events) for a detailed overview. \n\n### set , set:key\n\nEmitted when setting a value to a new record.\n\n    cache.on('set', function(key, value, ttl){});\n    cache.on('set:lorem', function(value, ttl){});\n    cache.set('lorem', 'ipsum', 123);\n    \n### update, update:key\n\nEmitted when updating the value or ttl of a known record.\n\n    cache.set('lorem', 'ipsum');\n    cache.on('update', function(key, value, ttl){});\n    cache.on('update:lorem', function(value, ttl){});\n    cache.set('lorem', 'ipsum', 123);\n\n### del, del:key\n\nEmitted when deleting a record or when a cached record times out.\n\n    cache.set('lorem', 'ipsum');\n    cache.on('del', function(key){});\n    cache.on('del:lorem', function(){});\n    cache.del('lorem');\n    \n### clear\n\nEmitted when the cache gets cleared.\n\n    cache.on('clear', function(size){});\n    cache.clear();\n\n## Developing\n\nThe library is published to NPM and can be installed with the following command:\n\n    $ npm install js-cache\n    \n## Building\n\nThe scripts have to be bundled in order to use them in a browser. One of the tools you can use is browserify.\n\n    $ sudo npm install browserify -g\n    $ make browserify\n    \nThis will build the script in `bundle/cache.js`\n\n## Testing\n\nNavigate to this module's repository and make sure you have the development modules installed:\n\n    $ npm install\n\n\nRun the tests:\n\n    $ npm test\n\n",
  "_id": "js-cache@1.0.2",
  "dist": {
    "shasum": "e04d6a1744f8fede1b3b875462d24343c70d3b54",
    "tarball": "http://registry.npmjs.org/js-cache/-/js-cache-1.0.2.tgz"
  },
  "_npmVersion": "1.1.63",
  "_npmUser": {
    "name": "dirkbonhomme",
    "email": "dirk@bytelogic.be"
  },
  "maintainers": [
    {
      "name": "dirkbonhomme",
      "email": "dirk@bytelogic.be"
    }
  ],
  "directories": {},
  "_shasum": "e04d6a1744f8fede1b3b875462d24343c70d3b54",
  "_resolved": "https://registry.npmjs.org/js-cache/-/js-cache-1.0.2.tgz",
  "_from": "js-cache@*"
}
